# -*- coding: utf-8 -*-
"""daily.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovLVq30JG88qleqieQnfS-IyNwQtHaRp
"""

import asyncio
from clients.visual_crossing import CITY_ALIAS, fetch_weather_for_city, upsert_daily_weather_csv_async
from typing import Optional 

DEFAULT_VENUES = ["PAMPLONA", "BILBAO", "BURGOS", "VITORIA", "ZARAGOZA", "SAN SEBASTIAN"]

async def run_daily_weather_ingest(venues: list[str] | None = None, start_date: Optional[str] = None, end_date: Optional[str] = None):
    """Consulta Visual Crossing para cada venue y guarda en CSV."""
    venues = venues or DEFAULT_VENUES
    print("🚀 [ingest] Empezando ingest para venues:", venues)
    # Concult official names in Visual Crossing
    cities = [CITY_ALIAS.get(v, v) for v in venues]
    print("🔄 [ingest] Ciudades mapeadas a Visual Crossing:", cities)

    if not start_date:
        start_date = date.today().isoformat()

    # current fetch
    tasks = [fetch_weather_for_city(c, start_date, end_date) for c in cities]
    results = await asyncio.gather(*tasks, return_exceptions=True)

    ok, errors = 0, []
    for city, res in zip(cities, results):
        if isinstance(res, Exception):
            print(f"❌ [ingest] Error en fetch de {city}: {res}")
            errors.append(f"{city}: {res}")
        else:
            print(f"📥 [ingest] {len(res)} filas recibidas para {city}")
            for row in res:
                await upsert_daily_weather_csv_async(row)
            ok += len(res)

    print(f"🏁 [ingest] Finalizado: {ok} filas upserted, {len(errors)} errores")
    return {"result": "success", "weather_upserted": ok, "errors": errors}
